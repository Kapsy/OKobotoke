平成25年1月9日

小仏・Pure Dataテストプロジェクト

＊＊＊＊＊＊＊＊＊＊＊＊
遣るべきリスト(優先順位)
＊＊＊＊＊＊＊＊＊＊＊＊


・・・・
・名前・
・・・・

御小仏(おこぼとけ)
Honorable Little Buddha

O Little Buddha

O`Kobotoke
Little Buddha
My Little Buddha
 
O Kobotoke

Electric Robot Buddha lights

Ascending Lights


・・・・・・・・・・
・これからの流れ：・
・・・・・・・・・・

X・新しいプロジェクトを作る

X・PDをサービスで実行するとこの勝利OnResumeなど
	→ PureData latency tester を見る
	→ とりあいず、PdTestを見てみよう
	→ android:launchMode="singleTask"　（http://d.hatena.ne.jp/sakura_bird1/20120721/1342846083）

X・画面の回転問題・縦向きに限り：http://libro.tuyano.com/index3?id=190001
X	→ とりあいず、PdTestを見てみよう

ｘPathの使い方を調べて

ｘBitmap背景を設定する
ｘフェードイン/アウト・スプラシュ

X・音声再生によって画面に涙の形を生み出す
	→　涙型　読み方：なみだがた



X・スプラシュ、最初のんがれ

ｘスプラシュ透明問題を解決

ｘスプラシュをプロジェクトに挿入

xスプラシュ問題を解決

X・逆涙型？そうしたら、元の形を保存したい。

ｘ円形を書くため新たなメソッド、描画とアニメ全部処理するメソッド

ｘ・端も透明？

ｘCOSINEで起きさを変更すること？
http://ja.wikipedia.org/wiki/%E4%B8%89%E8%A7%92%E9%96%A2%E6%95%B0

ｘ形のモジュレーション

Xピン音によって赤い円形形を書くこと

X画面の領域いに合う→出来れば、Rectを書くってこと
	→ 円形が伸びて端に打つかると大丈夫だが、作成した時に打つかる絶対ダメ！

ｘ実装ができる親クラスを作る

ｘフィールドは全てprivateフィールドとし、模試必要ならprotectedフィールドの代わりとしてprotectedメソッドのgetter/setterを用意すればよい。

2013-01-20
ｘtwotouchの順番を交換して → 親指は第一(大きい円形)、人差し指は第二(光見たい円形)

ｘソーナー音によって書いた円形を実装メッソドへ

X主な光的な円形を実装めっそどへ

2013年1月21日
ｘ無作為なソナーの線の厚さ

ｘマルチタッチの間の線 
ｘ	→ FMフィルター操作ができる

2013/01/22
X一本の指で指して何をしてるべき
ｘ三本処理

平成25年1月２５－28日
ｘディレー問題を修正…

ｘ高音は駄目かな？

ｘやはり次のプロジェクトMIDI録音は大事！

XBang問題

ｘクリックおと問題解決
	ー＞でも４０のほうがいいかな

XCircle配列化で

平成25年1月29日

ｘサンプルした正弦をクラスへ
ｘSwitching円形アニメーション

2013年2月1日

x円形の大きさを「フェードイン」

x実行中に値を変える機能

ｘ新たな値を入れて、

ｘ円形の半径をパーセント式へ

ｘ雨/星・粉みたいなこと…ソナーが鳴らす事によって色・位置が変わる
	パターンのこと
	→ pathのほうがいいじゃないか？演算にあまり負担はないみたい
＝＝＝＝＝ここまでにしました＝＝＝＝＝


フェーダー動くを録音する機能？
	→ 録音ループ　→録音なら、円形を描くとき
		録音しなきゃいけない値： x, y, Pdに送信された値
			（この方法が確かに一番早い）
		別方法：タッチ操作だけを録　（OnTouch別のOverride?）
		マルチスレッドがひつようかな？

円形半径計算・％形式を

方向が変えるとき主な形の速度を変える

別のビュークラスを作ったら、二本を使うときさくさくなるだろう。調べろ。



明るさ-最後の細かい処理など、完了するまでそんなに気にしない方がいいかも

背景レイヤー・Tailsを書くため？できるかな

光を変えるとき同心円が生み出す？

・設定画面

・テスト・デーブに、誰かに？

テーマの設定／今はもう無理。あと解決すればいいじゃない

・/PdCore/src/org/puredata/android/service/PdService.java　アイコンを変更

・公開しよう

日本語に訳して(アプリ説明、ボタンなど)

PD側を掃除して

Pdを読み込むとき、フェードイン


ー＝＝＝＝＝＝＝ー
＝＝＝ノート＝＝＝
ー＝＝＝＝＝＝＝ー

「http://www.javadrive.jp/android/xml_layout/index6.html
R.javaファイルの中ではリソースの種類が「id」のリソースとしてIDが登録されます。よってプログラムの中からこれらのリソースを参照する場合は「R.id.リソース名」で参照することになります。

全てのビューにIDを割り当てる必要はありません。プログラムの中から個別に参照したいビューに対してだけ設定を行って下さい。」

http://www.kab-studio.biz/Programing/JavaA2Z/Word/00000383.html
プログラムは、全てのスレッドが終了して初めて終了する。たとえば、新たにスレッドを作り、そのスレッドが終了する前に最初のスレッドがmain()メソッドから抜けて終了しても、プログラムは終了せず、全てのスレッドが終了して初めてプログラムが終了する。

http://www.tohoho-web.com/java/syntax.htm
「◆ float, double - 実数値
float と double には浮動小数点数を代入します。float に数値を代入する際には、数値の最後に F をつけます。1.23e4 は、1.23×104を意味します。

float a = 1.23F;
float b = 1.23e4F;
double b = 1.23e4;
浮動小数点数に関連して、以下の特別な値が用意されています。

float f1 = Float.NaN;                  // 非数（Not a Number）
float f2 = Float.POSITIVE_INFINITY;    // 正の無限大
float f3 = Float.NEGATIVE_INFINITY;    // 負の無限大
double d1 = Double.NaN;                // 非数（Not a Number）
double d2 = Double.POSITIVE_INFINITY;  // 正の無限大
double d3 = Double.NEGATIVE_INFINITY;  // 負の無限大」

==================
===消滅したこと===
==================

？・タッチと大きな形が産んで,音が変化して
とりあいず、ピンチ/ズームすると円形を書いてフィルターの音が生み出すってこと
　→同時に明かりの形がモジュレートするっと事

・背景？画像か？パースか？

・背景を再起動？フェード

・加速度

ーーーーーーーーーーーーーー
・OnResumeなどどう勝利すれべいいのか　←これ最も大事
	→ Bitmapを保存してないか

https://groups.google.com/forum/#!topic/android-group-japan/KomhbC02hc0

「ブラックバスを飼おうでは、水槽や魚をSurfaceViewで動かしているのですが、getDrawingCache()でキャプチャしても、Bitmapを取得できません。ぐぐってみると、同様の問題で悩んでいる人が結構いるみたいです。
で、悩んだ結果、SurfaceViewに描画する際、キャプチャするときだけキャプチャ用のバッファにBitmapをコピーするという方法で無事いけました。」

https://groups.google.com/forum/?fromgroups=#!topic/android-group-japan/KAsNLsdCViY
 「画面を構成するそれぞれの View から getDrawingCache から取得したビットマップ
組み合わせてそれっぽいものを作ることは出来たのですが、どうしても SurfaceView から 派生している VideoView のビットマップは取得できず、SurfaceView のソースコードを見て納得しているところです。」

	→ http://www.javadrive.jp/android/activity/index2.html
	「この時、別のアクティビティが画面に表示される前に「onPause()」メソッドが呼び出されます。
アクティビティが表示されなくなる前に行う処理をこのメソッドで行います。」

結論：
簡単な方法がないかも

https://groups.google.com/forum/#!topic/android-group-japan/KomhbC02hc0

2013年1月15日
やめた。できないかも
やってみないとわからないんですが…これ以上で無理だよ！
ーーーーーーーーーーーーーー
